# -------
# CRAWLER
# -------
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ name }}
  namespace: {{ namespace }}
  labels:
    crawl: {{ id }}
    role: {{ role }}

spec:
  selector:
    matchLabels:
      crawl: {{ id }}
      role: {{ role }}

  serviceName: {{ name }}
  replicas: {{ scale }}
  ordinals:
    start: {{ 0 if with_redis else 1 }}

  podManagementPolicy: OrderedReady

  # not yet supported
  #persistentVolumeClaimRetentionPolicy:
  #  whenDeleted: Delete
  #  whenScaled: Delete

  volumeClaimTemplates:
    - metadata:
        name: crawl-data
        labels:
          crawl: {{ id }}
          role: {{ role }}

      spec:
        accessModes:
          - ReadWriteOnce

        resources:
          requests:
            storage: {{ requests_hd }}

        {% if volume_storage_class %}
        storageClassName: {{ volume_storage_class }}
        {% endif %}

    {% if with_redis %}
    - metadata:
        name: redis-data
        labels:
          crawl: {{ id }}
          role: {{ role }}

      spec:
        accessModes:
          - ReadWriteOnce

        resources:
          requests:
            storage: {{ redis_storage_hd }}

        {% if volume_storage_class %}
        storageClassName: {{ volume_storage_class }}
        {% endif %}

    {% endif %}

  template:
    metadata:
      labels:
        crawl: {{ id }}
        role: {{ role }}

      {% if force_restart %}
      annotations:
        btrix.crawlForceRestart: "{{ force_restart }}"
      {% endif %}

    spec:
      terminationGracePeriodSeconds: {{ termination_grace_secs }}
      #nodeSelector: {{ crawl_node_selector }}
      volumes:
        - name: crawl-config
          configMap:
            name: crawl-config-{{ cid }}

        {% if with_redis %}
        - name: shared-redis-conf
          configMap:
            name: shared-redis-conf
            items:
              - key: redis.conf
                path: redis.conf

        {% endif %}

      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                - key: nodeType
                  operator: In
                  values:
                    - "{{ crawler_node_type }}"

      tolerations:
        - key: "nodeType"
          operator: "Equal"
          value: "crawling"
          effect: "NoSchedule"

      containers:
        - name: crawler
          image: {{ crawler_image }}
          imagePullPolicy: {{ crawler_image_pull_policy }}
          command:
            - crawl
            - --config
            - /tmp/crawl-config.json
            - --redisStoreUrl
            - {{ redis_url }}
          {%- if profile_filename %}
            - --profile
            - "@profiles/{{ profile_filename }}"
          {%- endif %}

          volumeMounts:
            - name: crawl-config
              mountPath: /tmp/crawl-config.json
              subPath: crawl-config.json
              readOnly: True

            - name: crawl-data
              mountPath: /crawls

          envFrom:
            - configMapRef:
                name: shared-crawler-config

            - secretRef:
                name: storage-{{ storage_name }}

          env:
            - name: CRAWL_ID
              value: "{{ id }}"

            - name: WEBHOOK_URL
              value: "{{ redis_url }}/crawls-done"

            - name: STORE_PATH
              value: "{{ store_path }}"

            - name: STORE_FILENAME
              value: "{{ store_filename }}"

            - name: STORE_USER
              value: "{{ userid }}"

        {% if crawler_socks_proxy_host %}
            - name: SOCKS_HOST
              value: "{{ crawler_socks_proxy_host }}"
          {% if crawler_socks_proxy_port %}
            - name: SOCKS_PORT
              value: "{{ crawler_socks_proxy_port }}"
          {% endif %}
        {% endif %}

        {% if with_redis %}
            - name: SKIP_REDIS
              value: "1"
        {% endif %}

          resources:
            limits:
              memory: {{ crawler_memory }}

            requests:
              cpu: {{ crawler_cpu }}
              memory: {{ crawler_memory }}

          {% if crawler_liveness_port and crawler_liveness_port != '0' %}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ crawler_liveness_port }}

            initialDelaySeconds: 15
            periodSeconds: 120
            failureThreshold: 3
          {% endif %}

        {% if with_redis %}
        - name: redis
          image: {{ redis_image }}
          imagePullPolicy: {{ redis_image_pull_policy }}

          args: ["/redis-conf/redis.conf", "--appendonly", "yes"]
          volumeMounts:
            - name: redis-data
              mountPath: /data

            - name: shared-redis-conf
              mountPath: /redis-conf

          resources:
            limits:
              memory: {{ redis_memory }}

            requests:
              cpu: {{ redis_cpu }}
              memory: {{ redis_memory }}

          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping

        {% endif %}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ name }}
  labels:
    crawl: {{ id }}
    role: {{ role }}

spec:
  clusterIP: None
  selector:
    crawl: {{ id }}
    role: {{ role }}

  ports:
    - protocol: TCP
      port: 9037
      name: screencast

    {% if with_redis %}
    - protocol: TCP
      port: 6379
      name: redis
    {% endif %}

